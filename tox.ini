# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static

[vars]
bind_path = {toxinidir}/bind-operator
dns_integrator_path = {toxinidir}/dns-integrator-operator
dns_policy_path = {toxinidir}/dns-policy-operator
dns_resolver_path = {toxinidir}/dns-resolver-operator
dns_secondary_path = {toxinidir}/dns-secondary-operator

bind_src_path = {[vars]bind_path}/src
dns_integrator_src_path = {[vars]dns_integrator_path}/src
dns_policy_src_path = {[vars]dns_policy_path}/src
dns_resolver_src_path = {[vars]dns_resolver_path}/src
dns_secondary_src_path = {[vars]dns_secondary_path}/src

bind_lib_path = {[vars]bind_path}/lib
dns_integrator_lib_path = {[vars]dns_integrator_path}/lib
dns_policy_lib_path = {[vars]dns_policy_path}/lib
dns_resolver_lib_path = {[vars]dns_resolver_path}/lib
dns_secondary_lib_path = {[vars]dns_secondary_path}/lib

src_path = {[vars]bind_src_path} {[vars]dns_integrator_src_path} {[vars]dns_policy_src_path} {[vars]dns_resolver_src_path} {[vars]dns_secondary_src_path}
lib_path = {[vars]bind_lib_path} {[vars]dns_integrator_lib_path} {[vars]dns_policy_lib_path} {[vars]dns_resolver_lib_path} {[vars]dns_secondary_lib_path}
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {[vars]tst_path}:{[vars]bind_src_path}:{[vars]dns_integrator_src_path}:{[vars]dns_policy_src_path}:{[vars]dns_resolver_src_path}:{[vars]dns_secondary_src_path}:{[vars]bind_lib_path}:{[vars]dns_integrator_lib_path}:{[vars]dns_policy_lib_path}:{[vars]dns_resolver_lib_path}:{[vars]dns_secondary_lib_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:debug]
description = Debug
allowlist_externals =
    echo
commands =
    echo {env:PYTHONPATH}

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]tst_path}
    black {[vars]tst_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    dnspython
    flake8
    flake8-builtins
    flake8-copyright<6.0.0
    flake8-docstrings>=1.6.0
    flake8-docstrings-complete>=1.0.3
    flake8-test-docs>=1.0
    isort
    jubilant
    mypy
    ops[testing]
    pep8-naming
    pydocstyle>=2.10
    pylint
    pyproject-flake8
    pytest
    pytest-asyncio
    pytest-operator
    requests
    types-PyYAML
    types-requests
commands =
    isort --check-only --diff {[vars]tst_path}
    black --check --diff {[vars]tst_path}
    mypy {[vars]tst_path}
    pylint {[vars]tst_path}
    # pflake8 wrapper supports config from pyproject.toml
    # pflake8 {[vars]all_path}

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]tst_path}

[testenv:integration]
description = Run integration tests
deps =
    dnspython
    juju
    jubilant
    ops
    pydantic
    pytest
    pytest-asyncio
    pytest-operator
commands =
    pytest -v --tb native {[vars]tst_path} --log-cli-level=INFO -s {posargs}
